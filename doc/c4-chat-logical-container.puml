@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!includeurl https://raw.githubusercontent.com/skleanthous/C4-PlantumlSkin/master/build/output/c4.puml
skinparam linetype polyline
skinparam linetype ortho

LAYOUT_LEFT_RIGHT()

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/angular.puml
!include DEVICONS/java.puml
!include DEVICONS/msql_server.puml
!include FONTAWESOME/users.puml


Person(clerk, "Clerk", "People that sell product", $sprite="users")
Person(customer, "Customer", "People that need product", $sprite="users")

Container_Ext(keycloak, "Keycloak", "java", "Authenticate user", $sprite="java")

Container_Boundary(chatContainer,chatContainer){
Container(spa, "SPA", "angular", "The main interface that the customer interacts with", $sprite="angular")

Container(gateway, "API Gateway", "java", "Handles all business logic", $sprite="java")
Container(chatapp, "ChatApp", "java", "Main chat application", $sprite="java")
Container(chatinstanceDiscovery, "ChatInstanceDiscovery", "java", "Component containing a registry of instances and open connections. It is able to find the instance based on the ID of the message recipient (connection owner). ", $sprite="java")
Container(chatinstanceLoadBalancer, "ChatInstanceLoadBalancer", "java", "Component directing traffic to the correct instances  ", $sprite="java")


ContainerQueue(chatqueue, "Chat Queue", "java", "Component  forwarding messages to the instance containing the connection to the recipient of the chat message.The actual queue is identified on the basis of the chat message addressee ID. ", $sprite="java")
ContainerDb(db, "Database", "Mongo DB", "Holds chat message history for user", $sprite="msql_server")

}
Rel(clerk, spa, "Uses", "https")
Rel(customer, spa, "Uses", "https")
Rel(spa, gateway, "Uses", "Websocket")
Rel_R(gateway,keycloak,"Uses", "https")
Rel(gateway,chatinstanceLoadBalancer,"Uses", "Websocket")
Rel_L(chatinstanceLoadBalancer,chatinstanceDiscovery,"Uses","REST")
Rel(chatinstanceLoadBalancer,chatapp,"Direct","Websocket")
Rel(chatapp,chatqueue,"Readns/Writes")
Rel(chatapp, db, "Reads/Writes")
Rel(chatinstanceDiscovery,chatapp,"HealthCheck")
Rel_L(chatapp,chatinstanceDiscovery,"Register connection")

@enduml